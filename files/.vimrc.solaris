" An example for a vimrc file.
"
" Maintainer:   Bram Moolenaar <Bram@vim.org>
" Last change:  2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"             for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"           for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup            " do not keep a backup file, use versions instead

set history=100         " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
" set incsearch         " do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map q gQ

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif


" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent                " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                  \ | wincmd p | diffthis
endif

"
if has("terminfo")
  let &t_Co=16
  let &t_AB="\<Esc>[%?%p1%{8}%<%t%p1%{40}%+%e%p1%{92}%+%;%dm"
  let &t_AF="\<Esc>[%?%p1%{8}%<%t%p1%{30}%+%e%p1%{82}%+%;%dm"
else
  let &t_Co=16
  let &t_Sf="\<Esc>[3%dm"
  let &t_Sb="\<Esc>[4%dm"
endif
"

set visualbell

" vimrc, R.Wobst, 6.12.2003

set shiftwidth=4
set showmode
set showmatch
set nojoinspaces
set cpo+=$
set whichwrap=""
set modelines=0
colorscheme evening


" Fix the difficult-to-read default setting for diff text highlighting.  The
" " bang (!) is required since we are overwriting the DiffText setting. The highlighting
" for "Todo" also looks nice (yellow) if you don't like the "MatchParen" colors.
"highlight! link DiffText MatchParen

if has('unix')
    let s:uname = system('uname')
    if s:uname == "Linux\n"
      set term=linux
    elseif s:uname == "SunOS\n"
      set term=dtterm
    elseif s:uname == "AIX\n"
      set term=dtterm
    else
      set term=xterm
    endif
endif

filetype plugin indent on
syntax enable

hi DiffAdd ctermfg=Gray

" activate folding
" zi ... toggle all folds
" zo ... open
" zc ... close
let python_highlight_all = 1
let python_fold = 1
let java_fold = 1
let perl_fold = 1
let sh_fold_enabled = 1
let php_folding = 1
let c_no_comment_fold = 1


"
" The following function and maps allow for [[ and ]] to search for a
" single char under the cursor.
"
function Cchar()
        let c = getline(line("."))[col(".") - 1]
        let @/ = c
endfunction
map [[ :call Cchar()<CR>n
map ]] :call Cchar()<CR>N
"
" Use F4 to switch between hex and ASCII editing
"
function Fxxd()
        let c=getline(".")
        if c =~ '^[0-9a-f]\{7}:'
                :%!xxd -r
        else
                :%!xxd -g4
        endif
endfunction

" key mappings
" F1  ... help
" F2  ... write file
" F3  ... quit vi
" F4  ... toggle hex mode
" F5  ... gqap ... format paragraph
" F8  ... write to pipe ~/p
" F9  ... read from pipe ~/p
" F10 ... quit and force writing
"
cmap <F1> :help
map <F2> :w<CR>
imap <F2> w<CR>a

map <F3> :q<CR>
imap <F3> q<CR>

map <F4> :call Fxxd()<CR>

map <F5> gqap

cmap <F8> w ! cat - >~/p<CR>

nmap <F9> :r ~/p<CR>

map <F10> :wq!<CR>
imap <F10> wq!<CR>

nmap <F11> <C-]>

" folding c/cpp/java
map <silent> <F12> :FOLD<CR>


" open all folds
normal zi

" disable mouse (want to have clipboard)
set mouse=

" http://vim.wikia.com/wiki/Super_retab
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g

if &diff
    let &t_Co=256
    colorscheme murphy
    "colorscheme slate
    " highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    " highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    " highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    " highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
endif


